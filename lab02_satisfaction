/**
 * NOTE: If you are having difficulty completing this exercise,
 * please take a look at our example in the file "sample.js"!
 */

/**
 * Given an array of fast food restaurants, return a new sorted
 * array in descending order by:
 *
 *   1. customerService
 *   2. foodVariety
 *   3. valueForMoney
 *   4. timeToMake
 *   5. taste
 *   6. name (in lexicographical order, case-insensitive)
 *
 * For example, if two restaurant have the same customerService
 * and foodVariety, the one with a higher valueForMoney will be
 * in front (nearer to the start of the returned array).
 *
 * If the all other fields are equal and the name is compared,
 * "hungry Jacks" will be before "KFC" because "h" is before "K".
 *
 * WARNING: You should NOT modify the order of the original array.
 *
 * @param {
 *   Array<{
 *     name: string,
 *     customerService: number,
 *     foodVariety: number,
 *     valueForMoney: number,
 *     timeToMake: number,
 *     taste: number
 *   }>
 * } fastFoodArray with information about fast food restaurants,
 * which should not be modified.
 * @returns array with the same items, sorted by the key-order given.
 */
function mergeSort(array,compareFunction){
	if (array.length <= 1){
		return array;
	}
	const middle = Math.floor(array.length/2);
	const left = array.slice(0,middle);
	const right = array.slice(middle);
	return merge(
		mergeSort(left,compareFunction),mergeSort(right,compareFunction),compareFunction
	);
}
function merge(left,right,compareFunction){
	let result = [];
	let leftIndex = 0;
	let rightIndex = 0;
	while (leftIndex < left.length && rightIndex < right.length){
		if (compareFunction(left[leftIndex],right[rightIndex])<= 0){
			result.push(left[leftIndex]);
			leftIndex++;
		}else{
		result.push(right[rightIndex]);
		rightIndex++;
		}
	}
	return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));
}
function compareFastFood(a,b){
	if (a.customerService !== b.customerService ){
		return a.customerService - b.customerService;
	}
	if (a.foodVariety !== b.foodVariety ){
		return a.foodVariety - b.foodVariety;
	}
	if (a.valueForMoney !== b.valueForMoney){
		return a.valueForMoney - b.valueForMoney;
	}
	if (a.timeToMake !== b.timeToMake){
		return a.timeToMake - b.timeToMake;
	}
	if (a.taste !== b.taste){
		return a.taste - b.taste;
	}
	const nameA = a.name.toLowerCase();
	const nameB = B.name.toLowerCase();
	return nameA.localeCompare(nameB);
}
function sortedFastFood(fastFoodArray) {
	return mergeSort(fastFoodArray,compareFastFood);
	
  // TODO: Observe the return type from the stub code
  // FIXME: Replace the stub code with your implementation
  
}

/**
 * Given an array of fast food restaurants, return a new sorted
 * array ranked by the overall satisfaction.
 *
 * The satisfaction of a restaurant is the average score between
 * customerService, foodVariety, valueForMoney, timeToMake and taste.
 *
 * You do not need to round the satisfaction value.
 *
 * If two restaurants have the same satisfaction, the names
 * are compared in lexigraphical order (case-insensitive).
 * For example, "hungry Jacks" will appear before "KFC" because
 * "h" is before "K".
 *
 * WARNING: you should NOT modify the order of the original array.
 *
 * @param {
 *   Array<{
 *     name: string,
 *     customerService: number,
 *     foodVariety: number,
 *     valueForMoney: number,
 *     timeToMake: number,
 *     taste: number
 *  }>
 * } fastFoodArray with information about fast food restaurants,
 * which should not be modified.
 * @returns {
 *   Array<{
 *     restaurantName: string,
 *     satisfaction: number,
 *   }>
 * } a new sorted array based on satisfaction. The restaurantName
 * will be the same as the original name given.
 */
function sortedSatisfaction(fastFoodArray) {
	// 1:create a new array with restaurant names and their satisfaction scores
	const satisfactionArray = fastFoodArray.map(restaurant => {
		const {name,customerService,foodVariety,valueForMoney,timeToMake,taste} = restaurant;
		const satisfaction = (customerService + foodVariety + valueForMoney + timeToMake + taste)/5;
		return {restaurantName:name,satisfaction};
	});
	//2:Sort the array by satisfaction in descending order, then by name in lexicographical order
	satisfactionArray.sort((a,b)=>{
		if (b.satisfaction !== a.satisfaction){
			return b.satisfaction - a.satisfaction;
		}
		return a.restaurantName.toLowerCase().localeCompare(b.restaurantName.toLowerCase()); });
	return satisfactionArray;
}

  // TODO: Observe the return type from the stub code
  // FIXME: Replace the stub code with your implementation
  
// ========================================================================= //

/**
 * Execute the file with:
 *     $ node satisfaction.js
 *
 * The expected/sample output for the starter code is in the README.md.
 * Feel free to modify the code below to further test your functions.
 */

// Note: do not use this "fastFoods" global variable directly in your function.
// Your function has the parameter "fastFoodArray".
const fastFoods = [
  {
    name: 'Second fastFood, third satisfaction (4.6)',
    customerService: 5,
    foodVariety: 5,
    valueForMoney: 5,
    timeToMake: 4,
    taste: 4,
  },
  {
    // Same as above, but name starts with "f"
    // which is before "S" (case-insensitive)
    name: 'First fastFood, second satisfaction (4.6)',
    customerService: 5,
    foodVariety: 5,
    valueForMoney: 5,
    timeToMake: 4,
    taste: 4
  },
  {
    // Worse foodVariety, but better overall
    name: 'Third fastFood, first satisfaction (4.8)',
    customerService: 5,
    foodVariety: 4,
    valueForMoney: 5,
    timeToMake: 5,
    taste: 5
  },
];

// Note: We are using console.log because arrays cannot be commpared with ===.
// There are better ways to test which we will explore in future weeks :).
console.log('========================');
console.log('1. Testing Fast Food');
console.log('===========');
console.log(sortedFastFood(fastFoods));
console.log();

console.log('========================');
console.log('2. Testing Satisfaction');
console.log('===========');
console.log(sortedSatisfaction(fastFoods));
console.log();

console.log('========================================================');
console.log(`
  TIP:
    after attempting yourself, if you are still stuck, please take a
    look at sample.js in your respository.
`);
console.log(`
  WARNING:
    do not return an array within an array,
      e.g. [[1, 2, 3]] (wrong) instead of [1, 2, 3] (correct).
    You should only see one set of square brackets in the output.
`);
